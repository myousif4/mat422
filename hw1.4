# Singular value decomposition 
import numpy as np

# Example matrix
A = np.array([[1, 2, 3],
              [4, 5, 6],
              [7, 8, 9]])

# Perform SVD
U, S, VT = np.linalg.svd(A)

print("Matrix U:")
print(U)
print("\nSingular values (S):")
print(S)
print("\nMatrix V^T:")
print(VT)

# Low-rank matrix approximations 
import numpy as np

A = np.array([[1, 2, 3],
              [4, 5, 6],
              [7, 8, 9]])

U, S, VT = np.linalg.svd(A)
k = 2
 
U_k = U[:, :k]
S_k = np.diag(S[:k])
VT_k = VT[:k, :]

A_approx = U_k @ S_k @ VT_k

print("Original Matrix A:")
print(A)
print("\nLow-Rank Approximated Matrix A_approx:")
print(A_approx)

# Principal component analysis
import numpy as np

X = np.array([[2.5, 2.4],
              [0.5, 0.7],
              [2.2, 2.9],
              [1.9, 2.2],
              [3.1, 3.0],
              [2.3, 2.7],
              [2, 1.6],
              [1, 1.1],
              [1.5, 1.6],
              [1.1, 0.9]])

X_mean = np.mean(X, axis=0)
X_centered = X - X_mean

cov_matrix = np.cov(X_centered, rowvar=False)

eigenvalues, eigenvectors = np.linalg.eigh(cov_matrix)

sorted_index = np.argsort(eigenvalues)[::-1]
eigenvalues_sorted = eigenvalues[sorted_index]
eigenvectors_sorted = eigenvectors[:, sorted_index]

k = 1
eigenvectors_subset = eigenvectors_sorted[:, :k]

X_reduced = np.dot(X_centered, eigenvectors_subset)

print("Original Data:")
print(X)
print("\nReduced Data (Principal Components):")
print(X_reduced)
